JVM 구성
1. Class Loader 
 	JVM내로 클래스를 로드하구 링크를 통해 배치하는 작업을 수행하는 모듈
	클래스를 처음 참조할때, 해당클래스를 로드하고 링크한다

2. Execution Engine 
	 클래스를 실행시키는 역할, 바이코드로 쓰여진 .class 파일로 변환한다
3. Interpreter 
	클래스를 실행시키는 역할 , 한줄 씩 수행하기 때문에 느리다
	/// 컴파일러이랑 인터프리터 차이점	 (잘 모르겟어)
	-> 인터프리터 : 소스코드를 각행을 연속적으로 분석하여 느리다.
	-> 자바 컴파일러 : 전체 소스를 분석하고 명령하를 수집하여 재구성한다
4.JIT (Just In Time)
	인터프리터 방식으로 실행하다가 적절한 시점에 바이코드 전체를 컴파일하여 네이티브 코드로 변경하고 네이티브 코드로 직접 실행하는 방식
	한번 콤파일된 코드는 빠르게 수행된다
5. Garbage collector
	가비지 컬렉터는 메모리를 관리해주는것이다. 
	-> 가비지 컬렉션과 컬렉터의 차이  *************(잘 모르겟어)
		가비지 컬렉터
			인스턴스화 시켰던 DataSet에 null을 할당하면 DataSet은 사용하지 않는 객체로 간주되고 가비지 컬렉션시에 메모리 해제의 대상이 된다. 
			하지만 DataSet은 DataTable을 가지고 있고, DataRow, DataItem과 같은 여러 객체들을 참조하고 있다. 
			바로 DataSet이 해제가 되면 그와 상호관련이 있었던 모든 객체들 역시 메모리를 해제해야 할 것이고 바로 가비지 컬렉터는 이러한 복잡한 관계를 Mark&Compact 알고리즘을 이용해서 이해하고 각각 해제될 수 있는 것이다.
		가비지 컬렉션
		 	가비지 컬렉션은 바로 메모리를 해제하고 새롭게 재배치 하는 작업을 칭하고 자동으로 수행되지만 수동으로도 수행을 명령할 수도 있다. 
		 	


		