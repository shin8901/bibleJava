#연산자
	쉬프트연산자(<<)는 덧셈연산자보다 우선순위가 낮다.
	x << 2+1 은 x << (2+1)과 같다.
	
	비교연산자보다(>)보다 산술연산자가 우선순위가 높다.
	x+3 > y-2은 x+3, y-2가 먼저 수행된다.
	 
	논리연산자에서 &&보다 비교연산자가 먼저 수행된다.
	x > 3 && x < 5
	
	논리연산자에서 AND를 의마하는 & 와 &&가 OR를 의미하는  |, || 보다 우선순위가 높다.
	x < -1 || (x >3 && x < 5)
	
	++i와 i=i+1의 비교
	결과는 같지만 과정은 다르다
	++i가 더 적은 명령만으로 작업을 수행하기 때문에 더 빠르다.
	덧셈연산자는 필요에따라 피연산자의 형변환도 수행하기 때문에 시간이 더 걸린다. 
	
	비트전환 연산자 ~
	피연산자를 2진수로 표현했을 때, 0은 1로 1은 0으로 변경
	정수형과 char형에만 사용
	※ byte, short, char 형은 int형으로 변환된 후에 전환된다.
	
	사칙,나머지,쉬프트 연산자는 이항 연산자 이므로 피연산자 계산 기본 단위가 4byte이므로
	보다 작으면 int형으로 변환한다.
	byte + short -> int + int -> int
	
	자료형의 크기가 큰 쪽에 맞춰 변환
	int + float -> float + float -> float
	
	나누기 연산에서 부호는 몫의 부호를 가져간다
	-10%8 -> -2
	10*-8 -> 2
	-10%-8 -> -2
	
	쉬프트 연산자!
	정수형 연산자에만 사용가능(오른쪽 또는 왼쪽으로 이동)
	x << n은 x*2^n의 결과와 같다
	x >> n은 x/2^n의 결과와 같다
	 8 >> 2은 8/4와 같지만 속도는 쉬프트연산자가 빠르다(특별히 실행속도가 최적화되어야하는 부분에 사용)
	 
	 등가비교연산자
	 모든 자료형 참조형포함(객체 주소값을 저장하기 때문에 비교 가능) 
	 
	 논리연산자
	 AND 연산의 경우 false가 먼저올 확률이 높은 연산을 앞에 놓는다
	 비트연산자의 & |의 경우에는 항상 모든 값을 검사한다
	 
	 비트연산자
	 |(OR연산자)
	 &(AND연산자)
	 ^(XOR연산자) -> 값이 다를 떄 참(1), 같을 떄 거짓(0)

